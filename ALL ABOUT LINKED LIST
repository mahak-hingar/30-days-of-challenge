
#include <stdio.h>
#include<stdlib.h>
struct node                //structure of linked list
{
  int data;
  struct node *next;
  struct node * prev;
} *first = NULL, *sec = NULL, *third = NULL, *fourth = NULL, *five =
  NULL, *six = NULL,*head,*f=NULL,*m=NULL;

void create (int a[], int n)		//create a linked list
{
  struct node *last, *t;
  first = (struct node *) malloc (sizeof (struct node));
  first->data = a[0];
  first->next = NULL;
  last = first;
  for (int i = 1; i < n; i++)
    {
      t = (struct node *) malloc (sizeof (struct node));
      t->data = a[i];
      t->next = NULL;
      last->next = t;
      last = t;
    }
}

void create2 (int a[], int n)	//create a linked list
{
  struct node *last, *t;
  sec = (struct node *) malloc (sizeof (struct node));
  sec->data = a[0];
  sec->next = NULL;
  last = sec;
  for (int i = 1; i < n; i++)
    {
      t = (struct node *) malloc (sizeof (struct node));
      t->data = a[i];
      t->next = NULL;
      last->next = t;
      last = t;
    }
}

void create3 (int a[], int n)	//create a linked list
{
  struct node *last, *t;
  third = (struct node *) malloc (sizeof (struct node));
  third->data = a[0];
  third->next = NULL;
  last = third;
  for (int i = 1; i < n; i++)
    {
      t = (struct node *) malloc (sizeof (struct node));
      t->data = a[i];
      t->next = NULL;
      last->next = t;
      last = t;
    }
} 
void create4 (int a[], int n)	//create a linked list
{
  struct node *last, *t;
  fourth = (struct node *) malloc (sizeof (struct node));
  fourth->data = a[0];
  fourth->next = NULL;
  last = fourth;
  for (int i = 1; i < n; i++)
    {
      t = (struct node *) malloc (sizeof (struct node));
      t->data = a[i];
      t->next = NULL;
      last->next = t;
      last = t;
    }
}
void create5(int a[], int n)		//create a linked list
{
  struct node *last, *t;
  m = (struct node *) malloc (sizeof (struct node));
  m->data = a[0];
 m->next = NULL;
  last = m;
  for (int i = 1; i < n; i++)
    {
      t = (struct node *) malloc (sizeof (struct node));
      t->data = a[i];
      t->next = NULL;
      last->next = t;
      last = t;
    }
}
void createcircular(int a[],int n)  //create a  circular linked list
{
    struct node  *t,*last;
    head= (struct node *)malloc(sizeof(struct node));
    head->data=a[0];
    head->next=head;
    last=head;
    for(int i=1;i<n;i++)
    { t= (struct node *)malloc(sizeof(struct node));
      t->data=a[i];
     t->next=last->next;
     last->next=t;
     last=t;
    }
}
void createdoubly(int a[],int n) //create a doubly linked list
{   struct node * t;
    struct node *last;
     f =(struct node *)malloc(sizeof(struct node));
    f->data =a[0];
    f->prev=f->next=NULL;
    last=f;
    for(int i =1;i<n;i++)
    {
        t= (struct node *)malloc(sizeof(struct node));
        t->data=a[i];
        t->next=last->next;
        t->prev=last;
        last->next=t;
        last=t;
        
    }
}
void dsply(struct node *p)   //display 
{
    while(p)
    {
        printf("%d ",p->data);
        p=p->next;
    } printf("\n");
}
int len(struct node *p) //length
{
    int s=0;
    while(p!=NULL)
    { s++;
      p=p->next;
    } return s;
}
void idll(struct node *p,int pos,int x)  //insertion in doubly linked list 
{   struct node *t,*q;
     t= (struct node *)malloc(sizeof(struct node));
        t->data=x;
        if(pos<0||pos>len(p))
        {
            return;
        }
        if(pos==1)
    {
       
        t->next=f;
        t->prev=NULL;
        f->prev=t;
        f=t;
    }
    else
    { 
       for(int  i=0;i<pos-1;i++) 
       {
           p=p->next;
       }
       t->prev=p;
       t->next=p->next;
       if(p->next)
       p->next->prev=t;
       p->next=t;
    }
}
int ddll(struct node *p,int pos)   //deletion in doubly linked list
{    p=f;
    int x;
    if(pos==1)
    {  f=f->next;
       x=p->data;
       free(p);
       if(f)
       f->prev=NULL;
        
    }
    else
    {
        for(int i=0;i<pos-1;i++)
        {
            p=p->next;
        }
        p->prev->next=p->next;
        if(p->next)
        p->next->prev=p->prev;
        x=p->data;
        free(p);
        
    } return x;
}
void rvrs(struct node *p)               //reverse of doubly linked list 
{
    struct node * temp;
    while(p!=NULL)
    {
        temp=p->next;
        p->next=p->prev;
        p->prev=temp;
        p=p->prev;
        if(p!=NULL && p->next==NULL)
        f =p;
    }
    
}
void insertionincircular(struct node *h,int pos,int x)     //insertion in circular linked list
{   struct node *t,*p=head;
    t= (struct node *)malloc(sizeof(struct node ));
    t->data =x;
    if(pos==NULL)
     {
         if(head==NULL)
         {
             head->data=x;
             head->next=head;
         }
         else
         {
             t->next=head;
             while(p->next!=head)
             {
                 p=p->next;
             }
             p->next=t;
             head=t;
         }
     }
    else
    {
        for(int i=0;i<pos-1;i++)
        {
            p=p->next;
        }
        t->next=p->next;
        p->next=t;
    }
     
}
void displaycircular(struct node *h)  //display a circular linked list
{ do
  {
      printf("%d ",h->data);
      h=h->next;
  }while(h!=head);
}

int delt(struct node * p,int pos)  //deletion 
{   struct node * q;
    p=head;
    if(pos==1)
    {
       if(p==head) 
       {
           free(head);
           head= NULL;
       }
       else
       {  while(p->next!=NULL)
            {
                p=p->next;
            }
           p->next= head->next;
           free(head);
           head= p->next;
       }
    }
    else
    {
        for(int i =0;i<pos-1;i++)
        {
            p=p->next;
        }
        q=p->next;
        p->next =q->next;
        int x= q->data;
        free(q);
    }
}



void recursivereverse (struct node *q, struct node *p)	// reverse of a linked list by recursion
{
  if (p != NULL)
    {
      recursivereverse (p, p->next);
      p->next = q;
    }
  else
    {
      first = q;
    }
}

int countp (struct node *p)		//counting nodes in a linked list  by recursion method 1 
{
  if (p == 0)
    {
      return 0;
    }
  return countp (p->next) + 1;
}

int count (struct node *p)		//counting nodes in a linked list  by recursion method 2
{
  int c = 0;
  if (p != 0)
    {
      c = count (p->next);
      return c + 1;
    }
  return c;
}

int countbyiterative (struct node *p)	//counting nodes in a linked list  by iterative method 
{
  int c = 0;
  while (p != NULL)
    {
      c++;
      p = p->next;
    }
  return c;
}

void insert (struct node *p, int pos, int x)	//insertion in alinked list
{
  struct node *t;
  if (pos < 0 || pos > count (p))
    return;
  t = (struct node *) malloc (sizeof (struct node));
  t->data = x;
  if (pos == 0)
    {
      t->next = first;
      first = t;
    }
  else
    {
      for (int i = 0; i < pos - 1; i++)
	p = p->next;

      t->next = p->next;
      p->next = t;
    }
}

void display (struct node *p)	//display all the elements
{
  while (p != NULL)
    {
      printf ("%d ", p->data);


      p = p->next;
    }
  printf ("\n");
}

int add (struct node *p)		// sum of all the elements by iterative method 
{
  int sum = 0;
  while (p != NULL)
    {
      sum = sum + p->data;
      p = p->next;
    }
  return sum;
}

int addbyrecursive (struct node *p)	// sum of all the elements by recursive method
{
  if (p == 0)
    return 0;
  else
    return addbyrecursive (p->next) + p->data;
}

int maxbyiterative (struct node *p)	//maximum element in a linked list
{
  int m = -32768;
  while (p != 0)
    {
      if (p->data > m)
	m = p->data;
      p = p->next;
    }
  return m;
}

int maxbyrecursive (struct node *p)	//maximum element in a linked list
{
  int x = 0;
  if (p == 0)
    return 0;
  else
    {
      x = maxbyrecursive (p->next);
      if (x > p->data)
	return x;
      else
	return p->data;
    }
  return x;
}

struct node * searchbyiterative (struct node *p, int key)	//searching of an element by iterative method 
{
  while (p != 0)
    {
      if (key == p->data)
	return p;
      p = p->next;
    }
  return NULL;
}

struct node * searchbyrecursive (struct node *p, int key)	//searching of an element by recursive method 
{
  if (p == 0)
    return NULL;
  if (key == p->data)
    return p;
  return searchbyrecursive (p->next, key);
}

struct node * bringfirst (struct node *p, int key)	//bring any node to the first 
{
  struct node *q = NULL;
  while (p != NULL)
    {
      if (key == p->data)
	{
	  return p;

	  p->next = q->next;
	  p->next = first;
	  first = p;

	}
      q = p;
      p = p->next;

    }
}

void sortedinsert (struct node *p, int x)	//inserting in asorted linked list
{
  struct node *t, *q = NULL;

  t = (struct node *) malloc (sizeof (struct node));
  t->data = x;
  t->next = NULL;

  if (first == NULL)
    {
      first = t;
    }
  else
    {
      while (p && p->data < x)
	{
	  q = p;
	  p = p->next;
	}
      if (p == first)
	{
	  t->next = first;
	  first = t;
	}
      else
	{
	  t->next = q->next;
	  q->next = t;
	}
    }
}

int delete (struct node *p, int pos)	//deletion in linked list 
{
  int x;

  struct node *q = NULL;
  if (pos == 1)
    {
      first = first->next;
      x = p->data;
      free (p);

    }
  else
    {
      for (int i = 0; i < pos - 1; i++)
	{
	  q = p;
	  p = p->next;
	}
      q->next = p->next;
      x = p->data;
      free (p);
    }
  return x;
}

int issorted (struct node *p)	//check whether the given linke list is sorted or not 
{
  int x = 0;
  while (p != NULL)
    {
      if (p->data < x)
	return 0;
      x = p->data;
      p = p->next;
      return 1;
    }
}

void removedupli (struct node *p)   //removeduplicates of linked list
{
  struct node *q = first->next;
  while (q != NULL)
    {
      if (p->data != q->data)
	{
	  p = q;
	  q = q->next;
	}
      else
	{
	  p->next = q->next;
	  free (q);
	  q = p->next;
	}

    }
}

void reversebylink (struct node *p)	//REVERSE BY LINKS
{
  int *a;
  a = (int *) malloc (sizeof (int) * count (p));
  int i = 0;

  while (p != NULL)
    {
      a[i] = p->data;
      p = p->next;
      i++;
    }
  p = first;
  i--;
  while (p != NULL)
    {
      p->data = a[i--];
      p = p->next;
    }
}

void reversebyslide (struct node *p)	//reverse linked list by sliding pointers
{
  struct node *q = NULL;
  struct node *r = NULL;
  while (p != NULL)
    {
      r = q;
      q = p;
      p = p->next;
      q->next = r;

    }
  first = q;

}

void concat (struct node *p, struct node *q) //conatenate two  list
{
  six = p;
  while (p->next != NULL)
    {
      p = p->next;
    }
  p->next = q;

}

void merge (struct node *p, struct node *q) //merge two linked list
{
  struct node *last;
  if (p->data < q->data)
    {
      five = last = p;
      p = p->next;
      last->next = NULL;
    }
  else
    {
      five = last = sec;
      sec = sec->next;
      last->next = NULL;
    }
  while (p != NULL && q != NULL)
    {
      if (p->data < q->data)
	{
	  last->next = p;
	  last = p;
	  p = p->next;
	  last->next = NULL;
	}
      else
	{
	  last->next = q;
	  last = q;
	  q = q->next;
	  last->next = NULL;
	}

    }
  if (p != NULL)
    last->next = p;
  else
    last->next = q;
}

int isloop (struct node *p) //function to check that the given linked list forms loop or not
{
  struct node *q;
  p = q = first;
  do
    {
      p = p->next;
      q = q->next;
      q = q != NULL ? q->next : NULL;
    }
  while (p != NULL && q != NULL && p != q);
  return p == q ? 1 : 0;
}
int getMiddle( struct node *p)
{  struct node *q=p;
   int c=0,x;
   while(p!=NULL)
   {
       c++;
       p=p->next;
   }
   for(int i=1;i<=c/2;i++)
   {
       q=q->next;
   }
    
    x=q->data;
    return x;
}

int main ()  //driver code
{
  int a[] = { 1, 2, 3, 4, 5 };
  int b[] = { 9, 10, 23, 34, 45, 56 };
  int c[] = { 1, 2, 3, 4, 5, 6 };
  int d[] = { 1, 5, 8, 10, 11 };
  int cir[] = {3,7,9,12,15};
  int darr[]= {11,12,13,14,15};
  int mid[] = { 1, 2, 3,7,9,4, 5 };
  struct node *temp, *t1, *t2;
  create (a, 5);
  create2 (b, 6);
  create3 (c, 6);
  create4 (d, 5);
  create5(mid,7);
  createcircular(cir,5);
  createdoubly(darr,5);
  printf ("\n ------------------------------SINGLY LINKED LIST-------------------------------\n");
  printf ("\nelements in linked list 1 are \n");
  display (first);
  printf ("\nelements in linked list 2 are \n");
  display (sec);
  printf ("\nelements in linked list 3 are \n");
  display (third);
  printf ("\nelements in linked list 4 are \n");
  display (fourth);
  printf ("\nelements in linked list 5 are \n");
  display (m);
  concat (first, sec);
  printf ("\nconcatenated  linked list \n");
  display (six);
  printf ("\nmerged  linked list  \n");
  merge (third, fourth);
  display (five);
  removedupli (first);
  printf ("\nelements in linked list after removing duplicates are \n");
  display (first);
  printf ("\nreverse elements of a linked list by recursive method \n");
  recursivereverse (NULL, first);
  display (first);
  printf ("\ncount the nodes in a linked list by method one -> \n%d",countp (first));
  printf ("\ncount the nodes in a linked list by method two -> \n%d ",count (first));
  printf ("\ncount the nodes in a linked list by iterative method -> \n%d \n",countbyiterative (first));
  printf ("\nsum of all the nodes by iterative method  \n%d ", add (first));
  printf ("\nsum of all the nodes by recursive method  \n%d ",addbyrecursive (first));
  printf ("\nmaximum element in a linked list by iterative method -> \n%d ",maxbyiterative (first));
  printf ("\nmaximum element in a linked list by iterative method -> \n%d ",maxbyrecursive (first));
  printf ("\naddress of %d element is by iterative -> \n%d ", 3,searchbyiterative (first, 3));
  printf ("\naddress of %d element is by recursive -> \n%d ", 4,searchbyrecursive (first, 4));
  temp = bringfirst (first, 3);
  if (temp)
    printf ("\nkey found at %d \n", temp);
  else
    printf ("\nnot found \n");
  printf ("\nafter insertion ");
  insert (first, 3, 4);
  printf ("\nelements in linked list are ");
  display (first);
  printf ("\nelements in linked list are  ");
  sortedinsert (first, 5);
  sortedinsert (first, 9);
  sortedinsert (first, 10);
  display (first);
  printf ("\ndeleted element is %d \n", delete (first, 3));
  printf ("\nlinked list after deletion is  ");
  display (first);
  if (issorted (first) == 1)
    printf ("\nsorted linked list \n");
  else
    printf ("\nunsorted linked list\n");
  reversebyslide (first);
  printf ("\nreversed linked list by sliding pointers  ");
  display (first);
  removedupli (first);
  printf ("\nelements in linked list after removing duplicates are ");
  display (first);
  printf ("\nreversed  by links   ");
  reversebylink (first);
  display (first);
  t1 = first->next->next;
  t2 = first->next->next->next->next;
  t2->next = t1;
  if (isloop (first) == 1)
    printf ("\ngiven linked list form loop \n");
  else
    printf ("\ngiven linked list is linear \n");
     
    printf("\n------------------------------CIRCULAR LINKED LIST-----------------------------------------\n");
    printf("\ncircular linked list  is \n ");
    displaycircular(head);
    printf("\ncircular linked list after insertion at first pos is \n ");
    insertionincircular(head,0,9);
    displaycircular(head);
    printf("\ncircular linked list after insertion at middle is \n ");
    insertionincircular(head,3,6);
    displaycircular(head);
    printf("\ncircular linked list after insertion at last pos is \n ");
    insertionincircular(head,5,10);
    displaycircular(head);
    delt(head,3);
    printf("\ncircular linked list after deletion of pos 4 element \n ");
    displaycircular(head);
    printf("\n------------------------------------DOUBLY LINKED LIST-------------------------------------------\n");
    printf("\ndoubly linked list  is \n ");
    dsply(f);
    printf("\nlength of doubly  linked list  is \n ");
    printf("%d\n",len(f));
    printf("\ndoubly linked list after insertion  is \n ");
    idll(f,3,10);
    idll(f,1,9);
    dsply(f);
    printf("\ndoubly linked list after deletion  is \n ");
    ddll(f,3) ;
    ddll(f,1) ;
    dsply(f);
     printf("\n reverse doubly linked list a  is \n ");
    rvrs(f);
    dsply(f);
    printf(" \nmiddle element of linked list 5 is \n%d ",getMiddle(m));
    

  return 0;
}



